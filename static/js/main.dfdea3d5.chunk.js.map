{"version":3,"sources":["components/main/hlogo.png","components/main/MainNav.js","components/FormSection/FormSection.js","components/ProcessedSchedule/ProcessedSchedule.js","components/ProcessedSchedule/ProceesNew.js","components/Functions/Processed.js","components/main/Spinner.js","components/main/Main.js","components/Functions/ProcessFile.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["MainNav","Navbar","bg","variant","Brand","href","src","logo","width","height","className","alt","style","color","FormSection","files","setFiles","paymentPeriod","setPaymentPeriod","handleSubmit","alert","setAlert","useState","curLabel","setCurLabel","prevLabel","setPrevLabel","current","setCurrent","previous","setPrevious","processingPeriod","slice","heading","handleChange","e","target","id","value","useEffect","setTimeout","Card","background","Container","Row","Col","Alert","Form","Text","as","Group","InputGroup","Prepend","Control","type","onChange","payP","split","File","label","data-browse","custom","Button","onClick","name","ProcessedSchedule","resolvedPromise","pre","setPre","cur","setCur","update","setUpdate","length","getInfo","prev","reject","Promise","resolve","list","forEach","emp","prevEmp","Name","ProcessNew","then","data","catch","error","console","log","fluid","Table","striped","bordered","hover","size","Object","values","map","i","info","keys","key","j","newsch","ws","xlsx","utils","json_to_sheet","skipHeader","wb","book_new","book_append_sheet","writeFile","Processed","window","location","reload","Spinner","Main","setResolvedPromise","loading","setLoading","setStyle","checkInput","Fragment","tempHolding","file","push","fileReader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","read","wsname","SheetNames","Sheets","sheet_to_json","header","blankrows","defval","onerror","processFile","allSettled","res","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfdea3d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hlogo.a40974bd.png\";","import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\nimport logo from './hlogo.png';\r\n\r\nconst MainNav = ()=>{\r\n    return(\r\n        <Navbar bg=\"primary\" variant='dark'>\r\n    <Navbar.Brand href=\"#home\">\r\n      <img\r\n        src={logo}\r\n        width=\"40\"\r\n        height=\"40\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"Assiniboine logo\"\r\n      />\r\n    </Navbar.Brand>\r\n    <h4 style={{color:'white'}}>HYDRO STAFF CONTRIBUTION</h4>\r\n  </Navbar>\r\n    )\r\n}\r\nexport default MainNav;","import React, { useState,useEffect } from 'react';\r\nimport {Alert,Button,Card,Container,Col,Form,InputGroup,Row} from 'react-bootstrap';\r\nimport './FormSection.css'\r\n\r\nconst FormSection = ({files,setFiles,paymentPeriod,setPaymentPeriod,handleSubmit,alert,setAlert})=>{\r\n    const [curLabel,setCurLabel]  = useState('');\r\n    const [prevLabel,setPrevLabel] = useState(' ');\r\n    const [current,setCurrent] = useState(' ')\r\n    const [previous,setPrevious] = useState('')\r\n    \r\n    const processingPeriod = paymentPeriod.slice(0,4);\r\n    const heading = [\r\n        'Name',\r\n        'Member_Number',\r\n        'Employer_Account',\r\n        paymentPeriod,\r\n        'Total-1',\r\n        'Employee Account',\r\n        processingPeriod,\r\n        'Total'\r\n        ]\r\n    \r\n    \r\n\r\n    const getSummary = (file)=>{\r\n       if(file){\r\n           setCurrent(files[0])\r\n           setPrevious(files[1])\r\n       }\r\n    }\r\n\r\n    const dateFormatter = (e)=>{\r\n        const payP = e.target.value.split('-')\r\n        setPaymentPeriod(payP[1] + payP[2] + 'pp')\r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        e.target.id === \"current-schedule\" ? setCurLabel(e.target.value) : setPrevLabel(e.target.value)\r\n        setFiles([...files,e.target.files[0]])\r\n    }\r\n\r\n   \r\n\r\n    useEffect(()=>{\r\n        getSummary(files)\r\n        if(alert){\r\n            setTimeout(()=>{\r\n                setAlert(false)\r\n            },1500)\r\n        }\r\n    })\r\n\r\n    return(\r\n    <div className='file-upload'>\r\n        <Card style={{background:'darkgray'}}>\r\n            <Container>\r\n            <Row>\r\n                <Col>\r\n                    <div className='form'>\r\n                    {alert &&<Alert className='text-center'variant=\"danger\">Please enter required information</Alert>}\r\n                        <Form>\r\n                            <Form.Text className=\"heading\" as=\"h5\">Please enter required fields</Form.Text>\r\n                    <Form.Group>\r\n                    <Form.Row>\r\n                            <Col>\r\n                            <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                            <InputGroup.Text>Payment Period</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            \r\n                            <Form.Control \r\n                            style={{width:15+'rem'}}\r\n                            type=\"date\"\r\n                            onChange={dateFormatter}\r\n                            />\r\n                            </InputGroup>\r\n                             </Col>\r\n                        </Form.Row>\r\n                             <br />\r\n                        <Form.Row>\r\n                            <Col>\r\n                            <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                            <InputGroup.Text>Current Schedule</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.File \r\n                            id=\"current-schedule\"\r\n                            label={curLabel}\r\n                            data-browse= \"upload\"\r\n                            onChange={handleChange}\r\n                             custom\r\n                             />\r\n                             </InputGroup>\r\n                             </Col>\r\n                        </Form.Row>\r\n                             <br />\r\n                        <Form.Row>\r\n                            <Col>\r\n                            <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                            <InputGroup.Text>Previous Schedule</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.File \r\n                            id=\"previous-schedule\"\r\n                            label= {prevLabel}\r\n                            data-browse= \"upload\"\r\n                            onChange={handleChange}\r\n                            custom\r\n                            />\r\n                            </InputGroup>\r\n                            </Col>\r\n                        </Form.Row>\r\n                        </Form.Group>\r\n                        \r\n                        <div className=\"d-flex justify-content-center\">\r\n                        <Button \r\n                        onClick={()=>handleSubmit(files,heading)} \r\n                        variant=\"primary\">Process</Button>\r\n                        </div>\r\n                        </Form>\r\n                        </div>\r\n                        </Col>\r\n                        <Col>\r\n                        <div className=\"form\">\r\n                        <Form.Text as=\"h4\" className=\"heading\">Summary</Form.Text>\r\n                        <ul className=\"summary\">\r\n                            <li>Payment Period:   <span className=\"update\">\r\n                                {paymentPeriod ? paymentPeriod : null}\r\n                                </span>\r\n                                </li>\r\n                            <li>Current Schedule:  <span className=\"update\">\r\n                                {current?.name}\r\n                            </span>\r\n                            </li>\r\n                            <li>Previous Schedule:   <span className=\"update\">\r\n                                {previous?.name}\r\n                                </span>\r\n                             </li>\r\n                        </ul>\r\n                    </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormSection;","// export default ProcessedSchedule;\r\nimport React,{useState,useEffect} from 'react';\r\nimport {Button,Card,Container,Table} from 'react-bootstrap';\r\nimport {ProcessNew} from './ProceesNew'\r\nimport {Processed} from '../Functions/Processed';\r\nimport './ProcessedSchedule.css'\r\n\r\n\r\nconst ProcessedSchedule = ({resolvedPromise,style})=>{\r\n   const [pre,setPre] = useState([])\r\n   const [cur,setCur] = useState([])\r\n   const [update,setUpdate] = useState([])\r\n//    const [heading,setHeading] = useState([])\r\n\r\n\r\n   //calling the save function to write updated schedule to a new file\r\nconst handleSave = ()=>{\r\n    \r\n  Processed(update.slice(0))\r\n}\r\n\r\n   \r\n//sorting resolved promises into current and previous schedules\r\nconst getInfo = (resolvedPromise)=>{\r\n    setTimeout(()=>{\r\n        if(resolvedPromise.length){\r\n            setCur(resolvedPromise[0])\r\n            setPre(resolvedPromise[1])\r\n             }\r\n    },1000)\r\n       \r\n}\r\n   \r\n    getInfo(resolvedPromise)\r\n    useEffect(()=>{\r\n        ProcessNew(pre.value,cur.value)\r\n        .then(data => setUpdate(data?.slice(0)))\r\n        .catch(error=>console.log(error));\r\n    },[pre,cur])\r\n\r\n\r\n    return(\r\n        <Container className=\"p-5\"fluid>\r\n            <Card className=\"display-container\">\r\n      <Table striped bordered hover size=\"sm\" >\r\n            <thead>\r\n                <tr className=\"bg-primary text-white text-center\">\r\n                    {update?.length ? Object.values(update[1]).map((label,i)=>{\r\n                       \r\n                        return <th key={i}>{label}</th>\r\n                    }): null}\r\n                </tr>\r\n            </thead>\r\n            <tbody className='table-body'>\r\n                \r\n                    {update ? update.slice(2).map((info,i)=>{\r\n                          return <tr key={i}className='text-center'>\r\n                               {Object.keys(info).map((key,j)=><td key={j}>{info[key]}</td>)}\r\n                                </tr>\r\n                    }): null}\r\n            </tbody>\r\n        </Table>\r\n        </Card>\r\n        <div className={style}>\r\n        <Button className=\"mr-3 px-5\" onClick={handleSave} variant=\"primary\" >Download</Button>\r\n            <Button className=\"ml-3 px-5\"onClick={()=>window.location.reload()} variant=\"primary\">Reset</Button>\r\n        </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ProcessedSchedule;","\r\n\r\n// const hasTotal = (label)=>{\r\n//     return label.includes('Total')\r\n// }\r\n\r\nimport { reject } from \"q\"\r\n\r\n// const hasNumber = (myString)=>{\r\n//     return /\\d/.test(myString);\r\n//   }\r\n  \r\n// const getContribution =(empList)=>{\r\n// const contributionList = []\r\n// empList?.slice(2).map(list =>{\r\n//     if(hasNumber(Object.keys(list))){\r\n//         contributionList.push({'name':list.Name,'contribution':[list.Total,list['Total-1']]})\r\n//     }\r\n    \r\n// })\r\n// return contributionList\r\n// }\r\n\r\n\r\n// const createnewWb = (pre,cur,contribution)=>{\r\n//     const contrib = contribution(pre)\r\n//     console.log('contrib is:',contrib)\r\n//     pre?.forEach(emp =>{\r\n//         contrib?.forEach(cont =>{\r\n//             if(emp.Name === cont.name){\r\n//                 console.log({\"name\":emp.Name,\"contribution\":cont.contribution})\r\n//                 console.log(emp)\r\n//             }\r\n//         })\r\n//     })\r\n// }\r\n// createnewWb(pre.value,getContribution)\r\n\r\n// export const ProcessNew =(pre,cur)=>{\r\n//     if(pre === 'undefined' || cur === 'undefined')  return\r\n//      return new Promise((resolve,reject)=>{\r\n//         const hasNumber = (myString)=>{\r\n//             return /\\d/.test(myString);\r\n//           }\r\n//         const getContribution =(empList)=>{\r\n//             const contributionList = []\r\n//             empList?.slice(2).map(list =>{\r\n//                 if(hasNumber(Object.keys(list))){\r\n//                     contributionList.push({'name':list.Name,'contribution':[list.Total,list['Total-1']]})\r\n//                     console.log('name:',list.name)\r\n//               }\r\n//               return contributionList\r\n//         })\r\n//         resolve(contributionList)\r\n//     }\r\n//     getContribution(pre,cur)\r\n//     reject('error')\r\n//     })\r\n// }\r\n   \r\n\r\n\r\n// creating promise to process file merge\r\n// function accepts two files (current-scedule file and previous-schedule file template)\r\n\r\nexport const ProcessNew =(prev,cur)=>{\r\n    \r\n    if(prev === 'undefined' || cur === 'undefined')  reject('There was an error') // stop operation if either value is undefined\r\n     return new Promise((resolve,reject)=>{\r\n            //  function to check is employee name already exist in new file\r\n    //    const isExist = (curFile,newFile)=>{\r\n    //     //    if(!curFile || !newFile) return \r\n      \r\n       \r\n    //        return emp.Name === newFile ? true: false\r\n     \r\n    // }\r\n    \r\n    \r\n    let list = [];\r\n    if(cur && prev){list = [...cur]\r\n        // console.log(list)\r\n        list.forEach(emp=>{\r\n            prev.forEach(prevEmp =>{\r\n                if(emp.Name === prevEmp.Name){\r\n                    emp['Employer_Account'] = prevEmp['Employer_Account']\r\n                    emp['Employee Account'] = prevEmp['Employee Account']\r\n                }\r\n            })\r\n        })\r\n    } \r\n        // let empName;\r\n        // extracting column headings in previous file\r\n        // const keys = prev?.length ? Object.keys(prev[2]) : null ;\r\n        //   const hasNumber = (myString)=>{\r\n        //     return /\\d/.test(myString);\r\n        //   } \r\n         \r\n// let newEmp = {}\r\n        //   merge current scedule file and previous schedule template\r\n            // cur?.forEach(curEmp =>{\r\n            //     empName = curEmp.Name\r\n            //     const isExist = list.findIndex(item =>{\r\n            //         return item.Name === empName ? true : false;\r\n            //     })\r\n                // prev?.forEach(prevEmp =>{\r\n                //     keys?.forEach(key =>{\r\n                //     if(prevEmp.Name === curEmp.Name && isExist < 0 ){\r\n                        \r\n                //         newEmp[key] = curEmp[key] === null ? prevEmp[key] : curEmp[key]\r\n                      \r\n                //         console.log(isExist)\r\n                        // list.push(newEmp)\r\n                        // if(isExist < 0){\r\n                        //     list.push(newEmp)\r\n                        //     console.log('newEmp-1',list)\r\n                        // }\r\n                        // list.push(newEmp)\r\n                    \r\n                        // newEmp[key] = prevEmp[key]\r\n                        // console.log('curEmp is',curEmp[key])\r\n                        // prevEmp[key] =  curEmp[key] \r\n                        // console.log('newEmp',newEmp)\r\n                        // console.log('current',curEmp[key],'previous Acc',prevEmp[key])\r\n                        // update new array if current employee not in new arrray\r\n                        // if(!isExist(list,empName)) list.push(newEmp)\r\n                    // }else if(!curEmp[key] && hasNumber(key)) {curEmp[key] = curEmp['Total']}\r\n                    \r\n                    // })\r\n                    // && key.includes('Account')    \r\n             \r\n\r\n                  \r\n                // })\r\n        // })\r\n        // if(!isExist(list,empName)) list.push(newEmp)\r\n        // console.log(list.findIndex(isExist(curEmp,empName)) )\r\n     \r\n       \r\n        resolve(list)\r\n    reject('error')\r\n    })\r\n}\r\n\r\n   ","import xlsx from 'xlsx';\r\n\r\n\r\nexport const Processed = (newsch)=>{\r\n    const fileName = 'test.xlsx';\r\n    const ws = xlsx.utils.json_to_sheet(newsch,{skipHeader:true})\r\n    console.log(ws)\r\n    const wb = xlsx.utils.book_new()\r\n    xlsx.utils.book_append_sheet(wb, ws, 'test');\r\n\t xlsx.writeFile(wb, fileName);\r\n}","import React from 'react';\r\nimport {Container} from 'react-bootstrap';\r\nimport './Main.css';\r\n\r\n\r\nconst Spinner =()=>{\r\n    return(\r\n        <Container className=\"loader\">\r\n            <div className=\"spinner-border text-muted \"></div>\r\n            <h4>Processing...</h4>\r\n        </Container>\r\n        \r\n    )\r\n}\r\nexport default Spinner;\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport MainNav from './MainNav';\r\nimport FormSection from '../FormSection/FormSection'\r\nimport ProcessedSchedule from '../ProcessedSchedule/ProcessedSchedule';\r\nimport {processFile} from '../Functions/ProcessFile';\r\nimport Spinner from './Spinner';\r\n\r\nconst Main = ()=>{\r\n    const [files,setFiles] = useState([]);\r\n    const [paymentPeriod,setPaymentPeriod] = useState('');\r\n    const [alert,setAlert] =useState(false)\r\n    const [resolvedPromise,setResolvedPromise] = useState([]);\r\n    const [loading,setLoading] = useState(false)\r\n    const [style,setStyle] = useState('btn-container')\r\n\r\n   \r\n    \r\n    \r\n\r\n        const handleSubmit =(files,heading)=>{\r\n            const tempHolding = []\r\n            checkInput()\r\n            if(!loading){\r\n                files?.map((file,i)=>{\r\n                    return tempHolding.push(processFile(file,heading)) \r\n                })\r\n                setStyle('btn-container__show')\r\n            Promise.allSettled(tempHolding).then(res => setResolvedPromise(res))  \r\n        }\r\n    }\r\n        const checkInput = ()=>{\r\n            if(files?.length < 2 || paymentPeriod === ' '){\r\n                setAlert(true)\r\n            }else{\r\n                setLoading(true)\r\n            }\r\n           \r\n            \r\n        }\r\n\r\n    useEffect(()=>{\r\n        if(loading){\r\n            setTimeout(()=>{\r\n                setLoading(false)\r\n            },1500)\r\n        }\r\n    })\r\n    return(\r\n        <React.Fragment>\r\n            \r\n             <MainNav/>\r\n            \r\n            {loading ? <Spinner/> : <FormSection \r\n             alert={alert}\r\n             setAlert={setAlert}\r\n             files={files} \r\n             setFiles={setFiles}\r\n             paymentPeriod={paymentPeriod}\r\n             setPaymentPeriod={setPaymentPeriod}\r\n             handleSubmit={handleSubmit}\r\n           \r\n             />}\r\n             <ProcessedSchedule resolvedPromise={resolvedPromise} style={style}/>\r\n        </React.Fragment>\r\n       \r\n    )\r\n}\r\n\r\nexport default Main;","import xlsx from 'xlsx';\r\n\r\nexport const processFile= (file,heading)=>{\r\n    if(!file) return\r\n     return new Promise((resolve,reject)=>{\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsArrayBuffer(file)\r\n    fileReader.onload = (e)=>{\r\n      const arrayBuffer = e.target.result\r\n      const wb = xlsx.read(arrayBuffer,{type:'buffer'});\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = xlsx.utils.sheet_to_json(ws,{ header: heading,blankrows: false,defval:null});\r\n      resolve(data)\r\n    }\r\n     \r\n     fileReader.onerror = (error)=>{\r\n          reject(error)\r\n        }\r\n\r\n   \r\n}) \r\n\r\n\r\n}","import React from 'react';\nimport Main from '../main/Main';\n\nimport './App.css';\n\nconst App= ()=> {\n  return (\n       <div >\n    <Main/>\n    </div>\n    \n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}